<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>阿里云Docker+Nginx部署同端口多个Vue前端项目</title>
    <url>/Docker/nginx-2.html</url>
    <content><![CDATA[<h1 id="Vue打包"><a href="#Vue打包" class="headerlink" title="Vue打包"></a>Vue打包</h1><blockquote>
<p><code>Vue.config.js</code>新增  <code>publicPath: &quot;./&quot;</code>或者写死也行，<a href="https://cli.vuejs.org/zh/config/#publicpath]">vue-cl</a>关于publishPath的解释</p>
</blockquote>
<h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><p>删除<code>conf.d</code>中的<code>default.conf</code>分别建立不同的项目配置。比如这里叫<code>demo1和demo2</code>，新建两个文件<code>demo1.conf和demo2.conf</code><br>并且配置中更改<code>location</code><br><code>demo1.conf</code> 中 <code>root   /usr/share/nginx/html;改为 /usr/share/nginx/html/demo1</code><br><code>demo2.conf</code> 中 <code>root   /usr/share/nginx/html;改为 /usr/share/nginx/html/demo2</code></p>
<p>然后在主机目录<code>html</code>中新建<code>demo1</code>和<code>demo2</code>文件夹。并分别上传项目即可</p>
]]></content>
      <categories>
        <category>AliYun</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
        <tag>前端部署</tag>
      </tags>
  </entry>
  <entry>
    <title>layout</title>
    <url>/Angular/angular-1-1.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>阿里云Docker+Nginx部署项目</title>
    <url>/Docker/nginx.html</url>
    <content><![CDATA[<p>购买的阿里云服务器已经安装了的<code>Docker</code>.所以这里只装nginx镜像即可即可</p>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>
<p>查询已安装镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/Docker/nginx/1.png" alt="查询镜像"></p>
<h2 id="启动nginx容器测试"><a href="#启动nginx容器测试" class="headerlink" title="启动nginx容器测试"></a>启动nginx容器测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name test-nginx -p 8080:80 -d nignx</span><br></pre></td></tr></table></figure>
<p><code>name</code> 容器名称。<br><code>p</code> <code>8080</code>端口映射到80 （<font color="red">注意在阿里云安全中要添加8080端口的规则</font>）</p>
<p><img src="/Docker/nginx/2.png" alt="启动"></p>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>将主机目录挂载到nginx容器中</p>
<h3 id="新建需要挂载的目录"><a href="#新建需要挂载的目录" class="headerlink" title="新建需要挂载的目录"></a>新建需要挂载的目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;welink&#x2F;nginx&#x2F;html &#x2F;welink&#x2F;nginx&#x2F;logs &#x2F;welink&#x2F;nginx&#x2F;conf &#x2F;welink&#x2F;nginx&#x2F;conf.d</span><br></pre></td></tr></table></figure>

<p><code>html</code>目录用于存放静态资源文件（web站点资源等）<br><code>logs</code>存放日志<br><code>conf</code>存放配置文件<br><code>conf.d</code> 存放多域名的配置文件</p>
<p>其中<code>conf</code>和<code>conf.d</code>的关系：<br>是需要我们把配置文件拆分开来,在<code>/etc/nginx/conf.d/</code> 文件建立对应的域名配置文件,比如 <code>/etc/nginx/conf.d/123.com.conf</code><br>只需要在原来文件<code>/etc/nginx/nginx.conf 的http</code> 块下加一句话就可以了:<br><code>include /etc/nginx/conf.d/*.conf</code>;</p>
<h3 id="复制默认文件到主机目录中"><a href="#复制默认文件到主机目录中" class="headerlink" title="复制默认文件到主机目录中"></a>复制默认文件到主机目录中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp test-nginx:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf &#x2F;welink&#x2F;nginx&#x2F;conf</span><br><span class="line">docker cp test-nginx:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf &#x2F;welink&#x2F;nginx&#x2F;conf.d</span><br></pre></td></tr></table></figure>
<h3 id="查询容器"><a href="#查询容器" class="headerlink" title="查询容器"></a>查询容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p><img src="/Docker/nginx/3.png" alt="查询启动容器"></p>
<h3 id="停止并删除容器"><a href="#停止并删除容器" class="headerlink" title="停止并删除容器"></a>停止并删除容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop test-nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm -f 0abbf56d882a</span><br></pre></td></tr></table></figure>
<h3 id="运行并将主机目录挂载到容器镜像目录中"><a href="#运行并将主机目录挂载到容器镜像目录中" class="headerlink" title="运行并将主机目录挂载到容器镜像目录中"></a>运行并将主机目录挂载到容器镜像目录中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 8080:80 \</span><br><span class="line">--name test-nginx \</span><br><span class="line">-v &#x2F;welink&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \</span><br><span class="line">-v &#x2F;welink&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \</span><br><span class="line">-v &#x2F;welink&#x2F;nginx&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d \</span><br><span class="line">-v &#x2F;welink&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>
<h2 id="修改html并预览"><a href="#修改html并预览" class="headerlink" title="修改html并预览"></a>修改html并预览</h2><p>这里直接用宝塔面板新建一个<code>html</code>文件<br><img src="/Docker/nginx/4.png" alt="查询启动容器"><br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World Nginx&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br>效果：<br><img src="/Docker/nginx/5.png" alt="查询启动容器"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>安装<code>nginx</code></li>
<li>新建主机目录</li>
<li>复制默认文件到主机目录中</li>
<li>挂载主机目录到容器镜像中</li>
<li>具体<code>nginx</code>配置可视情况自己修改</li>
</ol>
]]></content>
      <categories>
        <category>AliYun</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
        <tag>前端部署</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/React/React-1.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>Node</title>
    <url>/Node/Node-1.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/Vue/vue-1.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>hexo相关</title>
    <url>/hexo/hexo-1.html</url>
    <content><![CDATA[<h1 id="本地运行预览"><a href="#本地运行预览" class="headerlink" title="本地运行预览"></a>本地运行预览</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure>

<h1 id="执行部署前置"><a href="#执行部署前置" class="headerlink" title="执行部署前置"></a>执行部署前置</h1><p>部署之间最好使用github sshkey来建立连接</p>
<h1 id="加入资源文件"><a href="#加入资源文件" class="headerlink" title="加入资源文件"></a>加入资源文件</h1><blockquote>
<p>想加入少量静态资源图片等文件</p>
</blockquote>
<p>根目录的<code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder:true</span><br></pre></td></tr></table></figure>
<p>而资源最好放在同级的规划好的目录中，如下方式的同级目录</p>
<h1 id="建立文档目录结构"><a href="#建立文档目录结构" class="headerlink" title="建立文档目录结构"></a>建立文档目录结构</h1><p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new layout -p name&#x2F;name1</span><br></pre></td></tr></table></figure>
<p>来建立相应的区块目录。相关文档放在一起<br>如：分别建立Angular、React、Vue、Node 区块</p>
<p>分别执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new layout -p Angular&#x2F;angular-1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new layout -p Angular&#x2F;angular-2</span><br></pre></td></tr></table></figure>
<p>…..</p>
<a id="more"></a>

<p>生成目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source\_posts</span><br><span class="line">├── Angular</span><br><span class="line">|  ├── angular-1 &#x2F;&#x2F; 用于angular-1引用的。放置静态资源文件的文件夹·（anguarl-1&#x2F;xxx.png）</span><br><span class="line">|  └── angular-2 &#x2F;&#x2F; 用于angular-2引用的。放置静态资源文件的文件夹·</span><br><span class="line">|  ├── angular-1.md</span><br><span class="line">|  └── angular-2.md</span><br><span class="line">├── Node</span><br><span class="line">|  ├── Node-1 &#x2F;&#x2F; 放置静态资源文件的文件夹·</span><br><span class="line">|  └── Node-1.md</span><br><span class="line">├── test</span><br><span class="line">|  ├── test1 &#x2F;&#x2F; 放置静态资源文件的文件夹·</span><br><span class="line">|  └── test1.md</span><br><span class="line">└── Vue</span><br><span class="line">   ├── vue-1 &#x2F;&#x2F; 放置静态资源文件的文件夹·</span><br><span class="line">   └── vue-1.md</span><br></pre></td></tr></table></figure>

<h1 id="运行报错TypeError-ERR-INVALID-ARG-TYPE"><a href="#运行报错TypeError-ERR-INVALID-ARG-TYPE" class="headerlink" title="运行报错TypeError [ERR_INVALID_ARG_TYPE]"></a>运行报错TypeError [ERR_INVALID_ARG_TYPE]</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</span><br><span class="line">    at copyFile (fs.js:1972:10)</span><br></pre></td></tr></table></figure>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote>
<p>hexo 和 node 版本不匹配。这里使用nvm 进行降低版本。即可</p>
</blockquote>
<h1 id="执行部署报错fatal-unable-to-auto-detect-email-address"><a href="#执行部署报错fatal-unable-to-auto-detect-email-address" class="headerlink" title="执行部署报错fatal: unable to auto-detect email address"></a>执行部署报错fatal: unable to auto-detect email address</h1><p>对.deploy_git/git中的config文件添加：<br>[user]<br>    email = 邮箱<br>    name = 用户名</p>
]]></content>
      <categories>
        <category>github pages hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>前端运行</title>
    <url>/doc.html</url>
    <content><![CDATA[<h1 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h1><h2 id="方式一-："><a href="#方式一-：" class="headerlink" title="方式一 ："></a>方式一 ：</h2><blockquote>
<p>直接安装node</p>
</blockquote>
<p>  访问地址：<a href="https://nodejs.org/zh-cn/download/releases/">node版本下载地址</a><br>  这里以<code>14.5.4</code>版本为例（尽量高于<code>14.5.4</code>，本项目node-sass基于的node或高于<code>14.5.4</code>）</p>
<a id="more"></a>

<p>  选择<code>14.5.4</code>版本点击下载<br>  <img src="/doc/2.png" alt="下载node"><br>  选择你系统对应的<code>64</code>位或者<code>32</code>位的<code>node</code><br>  <img src="/doc/1.png" alt="下载node"></p>
<h2 id="方式二-："><a href="#方式二-：" class="headerlink" title="方式二 ："></a>方式二 ：</h2><blockquote>
<p>使用node管理工具安装（<font color="red"> 推荐 </font>）<br>   <strong>Unix / OS X</strong>:<br>安装：<a href="https://nodejs.org/zh-cn/download/package-manager/#nvm">https://nodejs.org/zh-cn/download/package-manager/#nvm</a></p>
</blockquote>
<p>   <strong>Windows</strong><br>    安装<a href="https://github.com/coreybutler/nvm-windows">nvm</a><br>    1.点击<a href="https://github.com/coreybutler/nvm-windows/releases">releases</a>进行安装<br>    2.选择最新的版本进行下载安装(<br>    <img src="/doc/3.png" alt="nvm"><br>    3.下载完成安装过程中。若出现以下提示，选择是让<code>nvm</code>管理原安装过的<code>node</code><br>    <img src="/doc/4.png" alt="nvm"><br>    4.安装之后常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm ls &#x2F;&#x2F; 查看目前已经安装的版本</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm install 14.15.4  &#x2F;&#x2F; 安装指定的版本的nodejs</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm use 14.15.4  &#x2F;&#x2F; 使用指定版本的nodejs</span><br></pre></td></tr></table></figure>
<h1 id="nrm安装"><a href="#nrm安装" class="headerlink" title="nrm安装"></a>nrm安装</h1><blockquote>
<p>管理不同镜像源</p>
</blockquote>
<p>对于国内环境。有时在下载依赖时，会出现安装失败的情况，而有时有需要访问其他源，如<code>npm</code>本身源，进行提交<code>npm</code>包等。</p>
<p>1.安装<code>nrm</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>
<p>2.常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nrm ls &#x2F;&#x2F; 查看所有的镜像源列表</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm use taobao  &#x2F;&#x2F; 切换为淘宝镜像</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm use taobao  &#x2F;&#x2F; 测试镜像速度</span><br></pre></td></tr></table></figure>
<p><img src="/doc/5.png" alt="nvm"></p>
<h1 id="vue-cli安装-非必须"><a href="#vue-cli安装-非必须" class="headerlink" title="vue-cli安装 (非必须)"></a>vue-cli安装 (非必须)</h1><blockquote>
<p>当你需要cli新建项目等，才进行安装。一般运行不需要安装</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>

<h1 id="安装vscode"><a href="#安装vscode" class="headerlink" title="安装vscode"></a>安装vscode</h1><blockquote>
<p><code>vscode</code> 安装之后， 安装项目所需插件。<br>   1.<strong>Veture</strong>、<br>   2.<strong>Prettier - Code formatter</strong>、<br>   3.<strong>Eslint</strong></p>
</blockquote>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── babel.config.js  &#x2F;&#x2F; Babel转码器配置文件</span><br><span class="line">├── jsconfig.json  &#x2F;&#x2F; 你的文件所在目录下的所有js代码做出个性化支持</span><br><span class="line">├── mock  &#x2F;&#x2F; 模拟数据</span><br><span class="line">├── package-lock.json  &#x2F;&#x2F; 锁定依赖版本</span><br><span class="line">├── package.json &#x2F;&#x2F; 项目或者各种依赖包的描述等</span><br><span class="line">├── plopfile.js  &#x2F;&#x2F;模块plop入口文件</span><br><span class="line">├── postcss.config.js &#x2F;&#x2F; postcss处理css 平台配置文件</span><br><span class="line">├── public  &#x2F;&#x2F; index页面</span><br><span class="line">├── README.md &#x2F;&#x2F; 说明md文件</span><br><span class="line">├── src  </span><br><span class="line">|  ├── App.vue  &#x2F;&#x2F; vue 根几点App</span><br><span class="line">|  ├── assets &#x2F;&#x2F; 静态资源文件夹</span><br><span class="line">|  ├── common &#x2F;&#x2F; 公用变量以及系统配置文件</span><br><span class="line">|  |  ├── api.js</span><br><span class="line">|  |  ├── btn.js</span><br><span class="line">|  |  ├── constants.js</span><br><span class="line">|  |  └── settings.js</span><br><span class="line">|  ├── components &#x2F;&#x2F; 组件</span><br><span class="line">|  ├── directive &#x2F;&#x2F; 指令</span><br><span class="line">|  ├── filters &#x2F;&#x2F; 过滤器</span><br><span class="line">|  ├── icons &#x2F;&#x2F; svg </span><br><span class="line">|  ├── layout &#x2F;&#x2F; 系统布局文件</span><br><span class="line">|  ├── main.js &#x2F;&#x2F; 系统入口</span><br><span class="line">|  ├── mixins &#x2F;&#x2F; 代码复用</span><br><span class="line">|  ├── permission.js &#x2F;&#x2F; 权限路由控制等</span><br><span class="line">|  ├── router &#x2F;&#x2F; 路由文件</span><br><span class="line">|  ├── store &#x2F;&#x2F; 状态管理</span><br><span class="line">|  ├── styles &#x2F;&#x2F; 系统样式</span><br><span class="line">|  ├── utils &#x2F;&#x2F; 公用方法</span><br><span class="line">|  └── views &#x2F;&#x2F; 业务逻辑（*）</span><br><span class="line">└── vue.config.js &#x2F;&#x2F; vue 细化配置文件</span><br></pre></td></tr></table></figure>
<h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><h2 id="修改-env-dev"><a href="#修改-env-dev" class="headerlink" title="修改.env.dev"></a>修改.env.dev</h2><p>  修改<code>VUE_APP_BASE_TARGET_API</code> 为你需要联调的后端地址</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install  &#x2F;&#x2F; 安装依赖（后面安装之后即不需要）</span><br></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>welink文档</category>
      </categories>
  </entry>
  <entry>
    <title>eslint 规则</title>
    <url>/eslint.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;no-alert&quot;: 0,&#x2F;&#x2F;禁止使用alert confirm prompt</span><br><span class="line">&quot;no-array-constructor&quot;: 2,&#x2F;&#x2F;禁止使用数组构造器</span><br><span class="line">&quot;no-bitwise&quot;: 0,&#x2F;&#x2F;禁止使用按位运算符</span><br><span class="line">&quot;no-caller&quot;: 1,&#x2F;&#x2F;禁止使用arguments.caller或arguments.callee</span><br><span class="line">&quot;no-catch-shadow&quot;: 2,&#x2F;&#x2F;禁止catch子句参数与外部作用域变量同名</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;no-class-assign&quot;: 2,&#x2F;&#x2F;禁止给类赋值</span><br><span class="line">&quot;no-cond-assign&quot;: 2,&#x2F;&#x2F;禁止在条件表达式中使用赋值语句</span><br><span class="line">&quot;no-console&quot;: 2,&#x2F;&#x2F;禁止使用console</span><br><span class="line">&quot;no-const-assign&quot;: 2,&#x2F;&#x2F;禁止修改const声明的变量</span><br><span class="line">&quot;no-constant-condition&quot;: 2,&#x2F;&#x2F;禁止在条件中使用常量表达式 if(true) if(1)</span><br><span class="line">&quot;no-continue&quot;: 0,&#x2F;&#x2F;禁止使用continue</span><br><span class="line">&quot;no-control-regex&quot;: 2,&#x2F;&#x2F;禁止在正则表达式中使用控制字符</span><br><span class="line">&quot;no-debugger&quot;: 2,&#x2F;&#x2F;禁止使用debugger</span><br><span class="line">&quot;no-delete-var&quot;: 2,&#x2F;&#x2F;不能对var声明的变量使用delete操作符</span><br><span class="line">&quot;no-div-regex&quot;: 1,&#x2F;&#x2F;不能使用看起来像除法的正则表达式&#x2F;&#x3D;foo&#x2F;</span><br><span class="line">&quot;no-dupe-keys&quot;: 2,&#x2F;&#x2F;在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span><br><span class="line">&quot;no-dupe-args&quot;: 2,&#x2F;&#x2F;函数参数不能重复</span><br><span class="line">&quot;no-duplicate-case&quot;: 2,&#x2F;&#x2F;switch中的case标签不能重复</span><br><span class="line">&quot;no-else-return&quot;: 2,&#x2F;&#x2F;如果if语句里面有return,后面不能跟else语句</span><br><span class="line">&quot;no-empty&quot;: 2,&#x2F;&#x2F;块语句中的内容不能为空</span><br><span class="line">&quot;no-empty-character-class&quot;: 2,&#x2F;&#x2F;正则表达式中的[]内容不能为空</span><br><span class="line">&quot;no-empty-label&quot;: 2,&#x2F;&#x2F;禁止使用空label</span><br><span class="line">&quot;no-eq-null&quot;: 2,&#x2F;&#x2F;禁止对null使用&#x3D;&#x3D;或!&#x3D;运算符</span><br><span class="line">&quot;no-eval&quot;: 1,&#x2F;&#x2F;禁止使用eval</span><br><span class="line">&quot;no-ex-assign&quot;: 2,&#x2F;&#x2F;禁止给catch语句中的异常参数赋值</span><br><span class="line">&quot;no-extend-native&quot;: 2,&#x2F;&#x2F;禁止扩展native对象</span><br><span class="line">&quot;no-extra-bind&quot;: 2,&#x2F;&#x2F;禁止不必要的函数绑定</span><br><span class="line">&quot;no-extra-boolean-cast&quot;: 2,&#x2F;&#x2F;禁止不必要的bool转换</span><br><span class="line">&quot;no-extra-parens&quot;: 2,&#x2F;&#x2F;禁止非必要的括号</span><br><span class="line">&quot;no-extra-semi&quot;: 2,&#x2F;&#x2F;禁止多余的冒号</span><br><span class="line">&quot;no-fallthrough&quot;: 1,&#x2F;&#x2F;禁止switch穿透</span><br><span class="line">&quot;no-floating-decimal&quot;: 2,&#x2F;&#x2F;禁止省略浮点数中的0 .5 3.</span><br><span class="line">&quot;no-func-assign&quot;: 2,&#x2F;&#x2F;禁止重复的函数声明</span><br><span class="line">&quot;no-implicit-coercion&quot;: 1,&#x2F;&#x2F;禁止隐式转换</span><br><span class="line">&quot;no-implied-eval&quot;: 2,&#x2F;&#x2F;禁止使用隐式eval</span><br><span class="line">&quot;no-inline-comments&quot;: 0,&#x2F;&#x2F;禁止行内备注</span><br><span class="line">&quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],&#x2F;&#x2F;禁止在块语句中使用声明（变量或函数）</span><br><span class="line">&quot;no-invalid-regexp&quot;: 2,&#x2F;&#x2F;禁止无效的正则表达式</span><br><span class="line">&quot;no-invalid-this&quot;: 2,&#x2F;&#x2F;禁止无效的this，只能用在构造器，类，对象字面量</span><br><span class="line">&quot;no-irregular-whitespace&quot;: 2,&#x2F;&#x2F;不能有不规则的空格</span><br><span class="line">&quot;no-iterator&quot;: 2,&#x2F;&#x2F;禁止使用__iterator__ 属性</span><br><span class="line">&quot;no-label-var&quot;: 2,&#x2F;&#x2F;label名不能与var声明的变量名相同</span><br><span class="line">&quot;no-labels&quot;: 2,&#x2F;&#x2F;禁止标签声明</span><br><span class="line">&quot;no-lone-blocks&quot;: 2,&#x2F;&#x2F;禁止不必要的嵌套块</span><br><span class="line">&quot;no-lonely-if&quot;: 2,&#x2F;&#x2F;禁止else语句内只有if语句</span><br><span class="line">&quot;no-loop-func&quot;: 1,&#x2F;&#x2F;禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span><br><span class="line">&quot;no-mixed-requires&quot;: [0, false],&#x2F;&#x2F;声明时不能混用声明类型</span><br><span class="line">&quot;no-mixed-spaces-and-tabs&quot;: [2, false],&#x2F;&#x2F;禁止混用tab和空格</span><br><span class="line">&quot;linebreak-style&quot;: [0, &quot;windows&quot;],&#x2F;&#x2F;换行风格</span><br><span class="line">&quot;no-multi-spaces&quot;: 1,&#x2F;&#x2F;不能用多余的空格</span><br><span class="line">&quot;no-multi-str&quot;: 2,&#x2F;&#x2F;字符串不能用\换行</span><br><span class="line">&quot;no-multiple-empty-lines&quot;: [1, &#123;&quot;max&quot;: 2&#125;],&#x2F;&#x2F;空行最多不能超过2行</span><br><span class="line">&quot;no-native-reassign&quot;: 2,&#x2F;&#x2F;不能重写native对象</span><br><span class="line">&quot;no-negated-in-lhs&quot;: 2,&#x2F;&#x2F;in 操作符的左边不能有!</span><br><span class="line">&quot;no-nested-ternary&quot;: 0,&#x2F;&#x2F;禁止使用嵌套的三目运算</span><br><span class="line">&quot;no-new&quot;: 1,&#x2F;&#x2F;禁止在使用new构造一个实例后不赋值</span><br><span class="line">&quot;no-new-func&quot;: 1,&#x2F;&#x2F;禁止使用new Function</span><br><span class="line">&quot;no-new-object&quot;: 2,&#x2F;&#x2F;禁止使用new Object()</span><br><span class="line">&quot;no-new-require&quot;: 2,&#x2F;&#x2F;禁止使用new require</span><br><span class="line">&quot;no-new-wrappers&quot;: 2,&#x2F;&#x2F;禁止使用new创建包装实例，new String new Boolean new Number</span><br><span class="line">&quot;no-obj-calls&quot;: 2,&#x2F;&#x2F;不能调用内置的全局对象，比如Math() JSON()</span><br><span class="line">&quot;no-octal&quot;: 2,&#x2F;&#x2F;禁止使用八进制数字</span><br><span class="line">&quot;no-octal-escape&quot;: 2,&#x2F;&#x2F;禁止使用八进制转义序列</span><br><span class="line">&quot;no-param-reassign&quot;: 2,&#x2F;&#x2F;禁止给参数重新赋值</span><br><span class="line">&quot;no-path-concat&quot;: 0,&#x2F;&#x2F;node中不能使用__dirname或__filename做路径拼接</span><br><span class="line">&quot;no-plusplus&quot;: 0,&#x2F;&#x2F;禁止使用++，--</span><br><span class="line">&quot;no-process-env&quot;: 0,&#x2F;&#x2F;禁止使用process.env</span><br><span class="line">&quot;no-process-exit&quot;: 0,&#x2F;&#x2F;禁止使用process.exit()</span><br><span class="line">&quot;no-proto&quot;: 2,&#x2F;&#x2F;禁止使用__proto__属性</span><br><span class="line">&quot;no-redeclare&quot;: 2,&#x2F;&#x2F;禁止重复声明变量</span><br><span class="line">&quot;no-regex-spaces&quot;: 2,&#x2F;&#x2F;禁止在正则表达式字面量中使用多个空格 &#x2F;foo bar&#x2F;</span><br><span class="line">&quot;no-restricted-modules&quot;: 0,&#x2F;&#x2F;如果禁用了指定模块，使用就会报错</span><br><span class="line">&quot;no-return-assign&quot;: 1,&#x2F;&#x2F;return 语句中不能有赋值表达式</span><br><span class="line">&quot;no-script-url&quot;: 0,&#x2F;&#x2F;禁止使用javascript:void(0)</span><br><span class="line">&quot;no-self-compare&quot;: 2,&#x2F;&#x2F;不能比较自身</span><br><span class="line">&quot;no-sequences&quot;: 0,&#x2F;&#x2F;禁止使用逗号运算符</span><br><span class="line">&quot;no-shadow&quot;: 2,&#x2F;&#x2F;外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span><br><span class="line">&quot;no-shadow-restricted-names&quot;: 2,&#x2F;&#x2F;严格模式中规定的限制标识符不能作为声明时的变量名使用</span><br><span class="line">&quot;no-spaced-func&quot;: 2,&#x2F;&#x2F;函数调用时 函数名与()之间不能有空格</span><br><span class="line">&quot;no-sparse-arrays&quot;: 2,&#x2F;&#x2F;禁止稀疏数组， [1,,2]</span><br><span class="line">&quot;no-sync&quot;: 0,&#x2F;&#x2F;nodejs 禁止同步方法</span><br><span class="line">&quot;no-ternary&quot;: 0,&#x2F;&#x2F;禁止使用三目运算符</span><br><span class="line">&quot;no-trailing-spaces&quot;: 1,&#x2F;&#x2F;一行结束后面不要有空格</span><br><span class="line">&quot;no-this-before-super&quot;: 0,&#x2F;&#x2F;在调用super()之前不能使用this或super</span><br><span class="line">&quot;no-throw-literal&quot;: 2,&#x2F;&#x2F;禁止抛出字面量错误 throw &quot;error&quot;;</span><br><span class="line">&quot;no-undef&quot;: 1,&#x2F;&#x2F;不能有未定义的变量</span><br><span class="line">&quot;no-undef-init&quot;: 2,&#x2F;&#x2F;变量初始化时不能直接给它赋值为undefined</span><br><span class="line">&quot;no-undefined&quot;: 2,&#x2F;&#x2F;不能使用undefined</span><br><span class="line">&quot;no-unexpected-multiline&quot;: 2,&#x2F;&#x2F;避免多行表达式</span><br><span class="line">&quot;no-underscore-dangle&quot;: 1,&#x2F;&#x2F;标识符不能以_开头或结尾</span><br><span class="line">&quot;no-unneeded-ternary&quot;: 2,&#x2F;&#x2F;禁止不必要的嵌套 var isYes &#x3D; answer &#x3D;&#x3D;&#x3D; 1 ? true : false;</span><br><span class="line">&quot;no-unreachable&quot;: 2,&#x2F;&#x2F;不能有无法执行的代码</span><br><span class="line">&quot;no-unused-expressions&quot;: 2,&#x2F;&#x2F;禁止无用的表达式</span><br><span class="line">&quot;no-unused-vars&quot;: [2, &#123;&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;&#125;],&#x2F;&#x2F;不能有声明后未被使用的变量或参数</span><br><span class="line">&quot;no-use-before-define&quot;: 2,&#x2F;&#x2F;未定义前不能使用</span><br><span class="line">&quot;no-useless-call&quot;: 2,&#x2F;&#x2F;禁止不必要的call和apply</span><br><span class="line">&quot;no-void&quot;: 2,&#x2F;&#x2F;禁用void操作符</span><br><span class="line">&quot;no-var&quot;: 0,&#x2F;&#x2F;禁用var，用let和const代替</span><br><span class="line">&quot;no-warning-comments&quot;: [1, &#123; &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; &#125;],&#x2F;&#x2F;不能有警告备注</span><br><span class="line">&quot;no-with&quot;: 2,&#x2F;&#x2F;禁用with</span><br><span class="line"></span><br><span class="line">&quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],&#x2F;&#x2F;是否允许非空数组里面有多余的空格</span><br><span class="line">&quot;arrow-parens&quot;: 0,&#x2F;&#x2F;箭头函数用小括号括起来</span><br><span class="line">&quot;arrow-spacing&quot;: 0,&#x2F;&#x2F;&#x3D;&gt;的前&#x2F;后括号</span><br><span class="line">&quot;accessor-pairs&quot;: 0,&#x2F;&#x2F;在对象中使用getter&#x2F;setter</span><br><span class="line">&quot;block-scoped-var&quot;: 0,&#x2F;&#x2F;块语句中使用var</span><br><span class="line">&quot;brace-style&quot;: [1, &quot;1tbs&quot;],&#x2F;&#x2F;大括号风格</span><br><span class="line">&quot;callback-return&quot;: 1,&#x2F;&#x2F;避免多次调用回调什么的</span><br><span class="line">&quot;camelcase&quot;: 2,&#x2F;&#x2F;强制驼峰法命名</span><br><span class="line">&quot;comma-dangle&quot;: [2, &quot;never&quot;],&#x2F;&#x2F;对象字面量项尾不能有逗号</span><br><span class="line">&quot;comma-spacing&quot;: 0,&#x2F;&#x2F;逗号前后的空格</span><br><span class="line">&quot;comma-style&quot;: [2, &quot;last&quot;],&#x2F;&#x2F;逗号风格，换行时在行首还是行尾</span><br><span class="line">&quot;complexity&quot;: [0, 11],&#x2F;&#x2F;循环复杂度</span><br><span class="line">&quot;computed-property-spacing&quot;: [0, &quot;never&quot;],&#x2F;&#x2F;是否允许计算后的键名什么的</span><br><span class="line">&quot;consistent-return&quot;: 0,&#x2F;&#x2F;return 后面是否允许省略</span><br><span class="line">&quot;consistent-this&quot;: [2, &quot;that&quot;],&#x2F;&#x2F;this别名</span><br><span class="line">&quot;constructor-super&quot;: 0,&#x2F;&#x2F;非派生类不能调用super，派生类必须调用super</span><br><span class="line">&quot;curly&quot;: [2, &quot;all&quot;],&#x2F;&#x2F;必须使用 if()&#123;&#125; 中的&#123;&#125;</span><br><span class="line">&quot;default-case&quot;: 2,&#x2F;&#x2F;switch语句最后必须有default</span><br><span class="line">&quot;dot-location&quot;: 0,&#x2F;&#x2F;对象访问符的位置，换行的时候在行首还是行尾</span><br><span class="line">&quot;dot-notation&quot;: [0, &#123; &quot;allowKeywords&quot;: true &#125;],&#x2F;&#x2F;避免不必要的方括号</span><br><span class="line">&quot;eol-last&quot;: 0,&#x2F;&#x2F;文件以单一的换行符结束</span><br><span class="line">&quot;eqeqeq&quot;: 2,&#x2F;&#x2F;必须使用全等</span><br><span class="line">&quot;func-names&quot;: 0,&#x2F;&#x2F;函数表达式必须有名字</span><br><span class="line">&quot;func-style&quot;: [0, &quot;declaration&quot;],&#x2F;&#x2F;函数风格，规定只能使用函数声明&#x2F;函数表达式</span><br><span class="line">&quot;generator-star-spacing&quot;: 0,&#x2F;&#x2F;生成器函数*的前后空格</span><br><span class="line">&quot;guard-for-in&quot;: 0,&#x2F;&#x2F;for in循环要用if语句过滤</span><br><span class="line">&quot;handle-callback-err&quot;: 0,&#x2F;&#x2F;nodejs 处理错误</span><br><span class="line">&quot;id-length&quot;: 0,&#x2F;&#x2F;变量名长度</span><br><span class="line">&quot;indent&quot;: [2, 4],&#x2F;&#x2F;缩进风格</span><br><span class="line">&quot;init-declarations&quot;: 0,&#x2F;&#x2F;声明时必须赋初值</span><br><span class="line">&quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],&#x2F;&#x2F;对象字面量中冒号的前后空格</span><br><span class="line">&quot;lines-around-comment&quot;: 0,&#x2F;&#x2F;行前&#x2F;行后备注</span><br><span class="line">&quot;max-depth&quot;: [0, 4],&#x2F;&#x2F;嵌套块深度</span><br><span class="line">&quot;max-len&quot;: [0, 80, 4],&#x2F;&#x2F;字符串最大长度</span><br><span class="line">&quot;max-nested-callbacks&quot;: [0, 2],&#x2F;&#x2F;回调嵌套深度</span><br><span class="line">&quot;max-params&quot;: [0, 3],&#x2F;&#x2F;函数最多只能有3个参数</span><br><span class="line">&quot;max-statements&quot;: [0, 10],&#x2F;&#x2F;函数内最多有几个声明</span><br><span class="line">&quot;new-cap&quot;: 2,&#x2F;&#x2F;函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span><br><span class="line">&quot;new-parens&quot;: 2,&#x2F;&#x2F;new时必须加小括号</span><br><span class="line">&quot;newline-after-var&quot;: 2,&#x2F;&#x2F;变量声明后是否需要空一行</span><br><span class="line">&quot;object-curly-spacing&quot;: [0, &quot;never&quot;],&#x2F;&#x2F;大括号内是否允许不必要的空格</span><br><span class="line">&quot;object-shorthand&quot;: 0,&#x2F;&#x2F;强制对象字面量缩写语法</span><br><span class="line">&quot;one-var&quot;: 1,&#x2F;&#x2F;连续声明</span><br><span class="line">&quot;operator-assignment&quot;: [0, &quot;always&quot;],&#x2F;&#x2F;赋值运算符 +&#x3D; -&#x3D;什么的</span><br><span class="line">&quot;operator-linebreak&quot;: [2, &quot;after&quot;],&#x2F;&#x2F;换行时运算符在行尾还是行首</span><br><span class="line">&quot;padded-blocks&quot;: 0,&#x2F;&#x2F;块语句内行首行尾是否要空行</span><br><span class="line">&quot;prefer-const&quot;: 0,&#x2F;&#x2F;首选const</span><br><span class="line">&quot;prefer-spread&quot;: 0,&#x2F;&#x2F;首选展开运算</span><br><span class="line">&quot;prefer-reflect&quot;: 0,&#x2F;&#x2F;首选Reflect的方法</span><br><span class="line">&quot;quotes&quot;: [1, &quot;single&quot;],&#x2F;&#x2F;引号类型 &#96;&#96; &quot;&quot; &#39;&#39;</span><br><span class="line">&quot;quote-props&quot;:[2, &quot;always&quot;],&#x2F;&#x2F;对象字面量中的属性名是否强制双引号</span><br><span class="line">&quot;radix&quot;: 2,&#x2F;&#x2F;parseInt必须指定第二个参数</span><br><span class="line">&quot;id-match&quot;: 0,&#x2F;&#x2F;命名检测</span><br><span class="line">&quot;require-yield&quot;: 0,&#x2F;&#x2F;生成器函数必须有yield</span><br><span class="line">&quot;semi&quot;: [2, &quot;always&quot;],&#x2F;&#x2F;语句强制分号结尾</span><br><span class="line">&quot;semi-spacing&quot;: [0, &#123;&quot;before&quot;: false, &quot;after&quot;: true&#125;],&#x2F;&#x2F;分号前后空格</span><br><span class="line">&quot;sort-vars&quot;: 0,&#x2F;&#x2F;变量声明时排序</span><br><span class="line">&quot;space-after-keywords&quot;: [0, &quot;always&quot;],&#x2F;&#x2F;关键字后面是否要空一格</span><br><span class="line">&quot;space-before-blocks&quot;: [0, &quot;always&quot;],&#x2F;&#x2F;不以新行开始的块&#123;前面要不要有空格</span><br><span class="line">&quot;space-before-function-paren&quot;: [0, &quot;always&quot;],&#x2F;&#x2F;函数定义时括号前面要不要有空格</span><br><span class="line">&quot;space-in-parens&quot;: [0, &quot;never&quot;],&#x2F;&#x2F;小括号里面要不要有空格</span><br><span class="line">&quot;space-infix-ops&quot;: 0,&#x2F;&#x2F;中缀操作符周围要不要有空格</span><br><span class="line">&quot;space-return-throw-case&quot;: 2,&#x2F;&#x2F;return throw case后面要不要加空格</span><br><span class="line">&quot;space-unary-ops&quot;: [0, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],&#x2F;&#x2F;一元运算符的前&#x2F;后要不要加空格</span><br><span class="line">&quot;spaced-comment&quot;: 0,&#x2F;&#x2F;注释风格要不要有空格什么的</span><br><span class="line">&quot;strict&quot;: 2,&#x2F;&#x2F;使用严格模式</span><br><span class="line">&quot;use-isnan&quot;: 2,&#x2F;&#x2F;禁止比较时使用NaN，只能用isNaN()</span><br><span class="line">&quot;valid-jsdoc&quot;: 0,&#x2F;&#x2F;jsdoc规则</span><br><span class="line">&quot;valid-typeof&quot;: 2,&#x2F;&#x2F;必须使用合法的typeof的值</span><br><span class="line">&quot;vars-on-top&quot;: 2,&#x2F;&#x2F;var必须放在作用域顶部</span><br><span class="line">&quot;wrap-iife&quot;: [2, &quot;inside&quot;],&#x2F;&#x2F;立即执行函数表达式的小括号风格</span><br><span class="line">&quot;wrap-regex&quot;: 0,&#x2F;&#x2F;正则表达式字面量用小括号包起来</span><br><span class="line">&quot;yoda&quot;: [2, &quot;never&quot;]&#x2F;&#x2F;禁止尤达条件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>Next 侧边添加新的自定义连接</title>
    <url>/createnewlayout.html</url>
    <content><![CDATA[<p><strong>Next 自己的页面布局并不能满足要求的时候，就要自己自定义布局页面</strong></p>
<hr>
<p>1.新建一个工具栏的侧边栏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page tools</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.<code>Next</code> 主题配置<code>_config.yml</code>文件<code>menu</code>选项增加<code>tools</code>的链接和<code>icon</code><br><img src="https://img-blog.csdnimg.cn/20200316123900302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.languages文件夹中增加tools文字显示<br><img src="https://img-blog.csdnimg.cn/20200316124014990.png" alt="在这里插入图片描述"><br>4.显示工具的图标gears。这里的图标全部取之于<a href="https://fontawesome.dashgame.com/">Font-Awesome</a><br><img src="https://img-blog.csdnimg.cn/2020031612442176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.效果<br><img src="https://img-blog.csdnimg.cn/20200316124509617.png" alt="在这里插入图片描述"></p>
<p><strong>千里之行<br>始于足下</strong></p>
]]></content>
      <categories>
        <category>github pages hexo建站</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>github pages+hexo 绑定域名</title>
    <url>/github-artical.html</url>
    <content><![CDATA[<p>上一章说到<a href="https://blog.csdn.net/u012733501/article/details/104815568">github pages+hexo 搭建自己的个人博客</a>  ，尚未关联自己的域名，毕竟<code>github pages</code>的 <code>username.github.io</code> 并不怎么好记和美观</p>
<hr>
<a id="more"></a>
<p>@<a href="文章目录">TOC</a></p>
<h2 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h2><p>这里我在<a href="https://www.aliyun.com/">阿里云</a>申请的域名，腾讯云、万维等都可以，你自己选择。<br>1、添加两条记录<br><img src="https://img-blog.csdnimg.cn/20200313153122717.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200313153209840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实说白了就是说解析带www和不带www的地址。<br>基本上这就ok了。<br><strong>但是切记！一定要实名认证！实名认证！实名认证</strong><br>可以看到这里未实名认证，是无法DNS解析的<br><img src="https://img-blog.csdnimg.cn/20200313153356282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="hexo绑定CNAME"><a href="#hexo绑定CNAME" class="headerlink" title="hexo绑定CNAME"></a>hexo绑定CNAME</h2><p>你的博客<code>source</code>目录建立<code>CNAME</code>文件，不带后缀，里面输入你的域名。比如我这里的域名是<a href="http://www.beginnerdone.top">beginnerdone.top</a>，那么输入<a href="http://www.beginnerdone.top">beginnerdone.top</a>即可<br><img src="https://img-blog.csdnimg.cn/20200313153650937.png" alt="在这里插入图片描述"><br>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<p>完成部署。</p>
<h2 id="github绑定域名"><a href="#github绑定域名" class="headerlink" title="github绑定域名"></a>github绑定域名</h2><p>博客setting项中的，github pages选项添加你的域名并保存<br><img src="https://img-blog.csdnimg.cn/20200313153920844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>直接访问<a href="http://beginnerdone.top/">我的博客</a></p>
<p><strong>千里之行<br>始于足下</strong></p>
]]></content>
      <categories>
        <category>github pages hexo建站</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>github pages+hexo 搭建自己的个人博客</title>
    <url>/githubpages-website.html</url>
    <content><![CDATA[<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>1.输入仓库的名称和说明（非必填），仓库名称格式为<code>username.github.io</code>,<strong>username 一定要和用户名一致，否则会404的</strong></p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200312115314279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.点击 Create repository创建仓库<br><img src="https://img-blog.csdnimg.cn/2020031212021255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h2><p>1.点击仓库中的setting<br><img src="https://img-blog.csdnimg.cn/20200312120336150.png" alt="在这里插入图片描述"><br>2.找到GitHub Pages 为站点选一个主题<br><img src="https://img-blog.csdnimg.cn/20200312120514883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p> 安装hexo 之前首先安装<a href="https://git-scm.com/download/">git</a> 以及<a href="https://nodejs.org/en/download/">node.js</a>.<br>使用npm 全局安装hexo </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><p>执行以下命令，创建hexo所需文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo  init</span><br></pre></td></tr></table></figure>
<p>在初始化的文件夹中下载依赖</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h3 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>注意<code>_config.yml</code>文件，网站的 配置 信息，可以在此配置大部分的参数。具体参考<a href="https://hexo.io/zh-cn/docs/configuration">配置信息</a></p>
<h3 id="修改-config-yml文件并部署到github上"><a href="#修改-config-yml文件并部署到github上" class="headerlink" title="修改_config.yml文件并部署到github上"></a>修改_config.yml文件并部署到github上</h3><h4 id="修改-config-yml中"><a href="#修改-config-yml中" class="headerlink" title="修改_config.yml中"></a>修改_config.yml中</h4><p>原有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: ‘’</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:BeginnerDone/beginnerdone.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: 第一次部署</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>使用何种方式进行部署（有git、Heroku、Netlify等等）</td>
<td>必填一种</td>
</tr>
<tr>
<td>repo</td>
<td>库（Repository）地址</td>
<td>我这里使用的是ssh 验证，因为https地址每次输入账号和密码是很麻烦的一件事！推荐使用ssh，没有ssh key的请先生成添加到github上</td>
</tr>
<tr>
<td>branch</td>
<td>分支名称</td>
<td>gh-pages (GitHub)    coding-pages  (Coding.net  master (others)</td>
</tr>
<tr>
<td>message</td>
<td>提交信息</td>
<td></td>
</tr>
</tbody></table>
<p><strong>以上参数冒号后面的参数一定要加空格！空格！空格！</strong></p>
<h4 id="部署访问站点"><a href="#部署访问站点" class="headerlink" title="部署访问站点"></a>部署访问站点</h4><pre><code>执行</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>访问我的<a href="https://beginnerdone.github.io/">github pages 博客</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200312141308417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MzM1MDE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="更改hexo主题"><a href="#更改hexo主题" class="headerlink" title="更改hexo主题"></a>更改hexo主题</h2><p>这里替换的是<a href="http://theme-next.iissnan.com/getting-started.html">Next</a>主题</p>
<h3 id="安装Next"><a href="#安装Next" class="headerlink" title="安装Next"></a>安装Next</h3><p>只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下，然后修改<code>_config.yml</code>文件中的<code>theme</code>节点为<code>next</code>即可<br><img src="https://img-blog.csdnimg.cn/20200312145236454.png" alt="在这里插入图片描述"><br>当然了，不用自己去拷贝那么麻烦，只需要在当前站点文件夹下<br>使用<code>git</code>命令下载<code>next</code>即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/iissnan/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>
<p>查看<code>theme</code>文件夹已经下好了<code>next</code>主题<br><img src="https://img-blog.csdnimg.cn/20200312145515337.png" alt="在这里插入图片描述"></p>
<h4 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h4><p><strong>外观<code>Scheme</code>选择</strong></p>
<p><code>Next</code>提供三种 不同的<code>Scheme</code>外观</p>
<p>1.<code>Muse</code> - 默认 <code>Scheme</code>，这是 NexT 最初的版本，黑白主调，大量留白<br>2.<code>Mist</code> - <code>Muse</code> 的紧凑版本，整洁有序的单栏外观<br>3.<code>Pisces</code> - 双栏 <code>Scheme</code>，小家碧玉似的清新<br>只需要在<code>themes\next</code>中的<code>_config.yml</code>中<code>scheme</code>节点启用即可<br>例如这里启用了<code>Mist</code><br><img src="https://img-blog.csdnimg.cn/20200312162628600.png" alt="在这里插入图片描述"><br><strong>设置语言</strong><br>设置根目录<code>_config.yml</code>中的language 为中文，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure>
<p>后续配置参考<a href="http://theme-next.iissnan.com/getting-started.html#select-scheme">Next</a></p>
<h3 id="再次部署"><a href="#再次部署" class="headerlink" title="再次部署"></a>再次部署</h3><p>这里要特别注意，更换主题后，再次部署的时候要执行下，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020031214571113.png" alt="在这里插入图片描述"><br>然后再执行<code>hexo deploy --generate</code>（简写<code>hexo d -g</code>）生成文件自动部署</p>
<hr>
<h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>1.访问首页和归档的时候总是404<br>    url地址后面总会多出%20编码，通过<a href="https://tool.oschina.net/encode?type=4">在线编码转换</a>查出url地址多出了空格。<br>    解决办法就是<code>themes\next</code>中的<code>_config.yml</code>中<code>menu</code>选项中空格全部去掉，比如<code>/archives/</code>后面的空格就要去掉<br>    <img src="https://img-blog.csdnimg.cn/20200312172925521.png" alt="在这里插入图片描述"></p>
<p>个人博客地址：<a href="https://beginnerdone.github.io/">传送门</a><br>github：<a href="https://github.com/BeginnerDone/beginnerdone.github.io">传送门</a><br><strong>千里之行<br>始于足下</strong></p>
]]></content>
      <categories>
        <category>github pages hexo建站</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
